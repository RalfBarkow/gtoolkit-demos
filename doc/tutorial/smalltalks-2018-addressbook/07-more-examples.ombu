OmEntry {	#tags : {		#prior : OmNullReference [  ],		#self : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DmAbAddressBookExample,				#isMetaSide : false			},			#name : #janeDoeContact,			#protocol : #'examples ',			#sourceCode : 'janeDoeContact\r\t<gtExample>\r\t| contact |\r\tcontact := DmAbContact new\r\t\tfirstName: \'Jane\';\r\t\tlastName: \'Doe\';\r\t\tdescription: String loremIpsum;\r\t\tavatar: DmAbContact janeDoeAvatar;\r\t\taddress: self contactAddress.\r\r\tself assert: contact firstName equals: \'Jane\'.\r\tself assert: contact lastName equals: \'Doe\'.\r\tself assert: contact description equals: String loremIpsum.\r\tself assert: contact address notNil.\r\r\t^ contact',			#stamp : 'JurajKubelka 11/5/2018 13:17',			#package : #AddressBook		}	}}OmEntry {	#tags : {		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DmAbAddressBookExample,				#isMetaSide : false			},			#name : #myContactsAddressBook,			#protocol : #'examples ',			#sourceCode : 'myContactsAddressBook\r\t<gtExample>\r\t| addressBook |\r\taddressBook := DmAbAddressBook new\r\t\tlabel: \'Example Contacts\'.\r\taddressBook addContact: self johnDoeContact.\r\taddressBook addContact: self janeDoeContact.\r\t\r\tself assert: addressBook contacts size equals: 2.\r\tself assert: (addressBook includesContactWithName: \'John*\').\r\tself assert: (addressBook includesContactWithName: \'Jane*\').\r\t\r\t^ addressBook',			#stamp : 'JurajKubelka 11/5/2018 13:18',			#package : #AddressBook		}	}}OmEntry {	#tags : {		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DmAbAddressBook,				#isMetaSide : false			},			#name : #'gtContactsIn:',			#protocol : #gt-extension,			#sourceCode : 'gtContactsIn: aView\r\t<gtView>\r\t^ aView explicit \r\t\ttitle: \'Contacts\' translated;\r\t\tpriority: 5;\r\t\tstencil: [\r\t\t\t| list |\r\t\t\tlist := BrColumnedList new display: self contacts.\r\t\t\tlist addEventHandler: (GtInspectorListToSelectHandler new).\r\t\t\tlist column \r\t\t\t\ttitle: \'Name\';\r\t\t\t\tstencil: [ :aContact | BrListLabelStencil matchParent: aContact fullName ].\r\t\t\tlist column \r\t\t\t\ttitle: \'Telephone\';\r\t\t\t\tstencil: [ :aContact | BrListLabelStencil matchParent: aContact address telephone ].\r\t\t\tlist ]',			#stamp : 'JurajKubelka 11/5/2018 13:19',			#package : #AddressBook		}	}}OmEntry {	#tags : {		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DmAbAddressBook,				#isMetaSide : false			},			#name : #'gtCardsIn:',			#protocol : #gt-extension,			#sourceCode : 'gtCardsIn: aView\r\t<gtView>\r\t^ aView list \r\t\ttitle: \'Cards\' translated;\r\t\tpriority: 8;\r\t\titems: [ self contacts ];\r\t\titemElement: [ :aContact |\r\t\t\t|container iconElement aText textElement|\r\t\t\tcontainer := BlElement new\r\t\t\t\tlayout: BlFlowLayout horizontal;\r\t\t\t\tconstraintsDo: [ :c | \r\t\t\t\t\tc horizontal matchParent.\r\t\t\t\t\tc vertical fitContent.\r\t\t\t\t\tc margin: (BlInsets all: 10)].\r\r\t\t\taContact avatar ifNotNil: [ \r\t\t\t\ticonElement := BlElement new\r\t\t\t\t\tsize: (124@124);\r\t\t\t\t\tbackground: (aContact avatar scaledToSize: 124@124).\r\t\t\t\tcontainer\r\t\t\t\t\taddChild: iconElement ].\r\t\r\t\t\taText := aContact fullName asRopedText\r\t\t\t\tfontSize: 40.\r\t\t\ttextElement := BlTextElement new\r\t\t\t\t\tconstraintsDo: [ :c |\r\t\t\t\t\t\tc flow vertical alignCenter.\r\t\t\t\t\t\tc padding: (BlInsets all: 10) ];\r\t\t\t\ttext: aText.\r\t\r\t\t\tcontainer \r\t\t\t\taddChild: textElement.\r\t\t\tcontainer ]',			#stamp : 'JurajKubelka 11/5/2018 13:22',			#package : #AddressBook		}	}}